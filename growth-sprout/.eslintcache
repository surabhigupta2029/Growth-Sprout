[{"/Users/nanarboursalian/Desktop/Hackathons/WinterHacklympics/growth-sprout/src/index.js":"1","/Users/nanarboursalian/Desktop/Hackathons/WinterHacklympics/growth-sprout/src/App.js":"2","/Users/nanarboursalian/Desktop/Hackathons/WinterHacklympics/growth-sprout/src/components/Background.js":"3","/Users/nanarboursalian/Desktop/Hackathons/WinterHacklympics/growth-sprout/src/DisplayJson.js":"4","/Users/nanarboursalian/Desktop/Hackathons/WinterHacklympics/growth-sprout/src/components/MyForm.js":"5"},{"size":200,"mtime":1608414180338,"results":"6","hashOfConfig":"7"},{"size":3197,"mtime":1608434312249,"results":"8","hashOfConfig":"7"},{"size":994,"mtime":1608414180335,"results":"9","hashOfConfig":"7"},{"size":922,"mtime":1608428269654,"results":"10","hashOfConfig":"7"},{"size":2540,"mtime":1608432306832,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1dfhdtf",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"14"},"/Users/nanarboursalian/Desktop/Hackathons/WinterHacklympics/growth-sprout/src/index.js",[],["24","25"],"/Users/nanarboursalian/Desktop/Hackathons/WinterHacklympics/growth-sprout/src/App.js",["26"],"/Users/nanarboursalian/Desktop/Hackathons/WinterHacklympics/growth-sprout/src/components/Background.js",[],"/Users/nanarboursalian/Desktop/Hackathons/WinterHacklympics/growth-sprout/src/DisplayJson.js",[],"/Users/nanarboursalian/Desktop/Hackathons/WinterHacklympics/growth-sprout/src/components/MyForm.js",["27"],"import React from \"react\";\nimport { Container, Row, Col } from \"reactstrap\";\nimport \"./MyForm.css\";\n\nvar submitted = false;\n\n// export function checkSubmit() \n// {\n//   return submitted;\n// }\n\nexport default class MyForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      USstate: \"\",\n      city: \"\",\n      zipcode: null\n    };\n  }\n\n\n  mySubmitHandler = event => {\n    event.preventDefault();\n    let zipcode = this.state.zipcode;\n    submitted = true;\n    if (!Number(zipcode)) {\n      alert(\"Your zipcode must be a number.\");\n    }\n    alert(\n      \"The information you provided state: \" +\n        this.state.USstate +\n        \", city: \" +\n        this.state.city +\n        \", zipcode: \" +\n        this.state.zipcode\n    );\n  };\n\n  myChangeHandler = event => {\n    let nam = event.target.name;\n    let val = event.target.value;\n    this.setState({ [nam]: val });\n  };\n  render() {\n    return (\n      <div  className=\"location-form\">\n        <Container>\n          <form onSubmit={this.mySubmitHandler}>\n            <Row>\n              <Col>\n                <p className=\"form-label\">STATE</p>\n              </Col>\n              <Col>\n                <input\n                  type=\"text\"\n                  name=\"USstate\"\n                  placeholder=\"Enter state.\"\n                  className=\"input-bar\"\n                  onChange={this.myChangeHandler}\n                />\n              </Col>\n            </Row>\n            <Row className=\"per-row\">\n              <Col>\n                <p className=\"form-label\">CITY</p>\n              </Col>\n              <Col>\n                <input\n                  type=\"text\"\n                  name=\"city\"\n                  placeholder=\"Enter city.\"\n                  className=\"input-bar\"\n                  onChange={this.myChangeHandler}\n                />\n              </Col>\n            </Row>\n            <Row className=\"per-row\">\n              <Col>\n                <p className=\"form-label\">ZIPCODE</p>\n              </Col>\n              <Col>\n                <input\n                  type=\"text\"\n                  name=\"zipcode\"\n                  placeholder=\"Enter zipcode.\"\n                  className=\"input-bar\"\n                  onChange={this.myChangeHandler}\n                />\n              </Col>\n            </Row>\n            <Row className=\"per-row\">\n              <Col>\n                <input className=\"sub-but\" type=\"submit\" />\n              </Col>\n            </Row>\n          </form>\n        </Container>\n      </div>\n    );\n  }\n}\n",{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":117,"column":50,"nodeType":"34","endLine":117,"endColumn":54},{"ruleId":"35","severity":1,"message":"36","line":26,"column":5,"nodeType":"37","messageId":"38","endLine":26,"endColumn":14},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","no-unused-vars","'submitted' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]